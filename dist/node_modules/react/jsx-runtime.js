(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-runtime"] = {}));
})(this, (function (exports) { 'use strict';

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  // React元素的类型
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;
  const REACT_FRAGMENT_TYPE = supportSymbol
      ? Symbol.for('react.fragment')
      : 0xeacb;

  // ReactElement 的构造函数：把 JSX 转换成 ReactElement 对象
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: 'PoorShawn' // 区别于官方React
      };
      return element;
  };
  function isValidElement(object) {
      return (typeof object === 'object' &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  }
  // jsx 函数：将 JSX 通过 Babel 编译后的结果，转换成 ReactElement 对象
  const jsx = (type, config, ...maybeChildren) => {
      let key = null;
      let ref = null;
      const props = {};
      // 遍历 config 对象
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key' && val !== undefined) {
              key = String(val);
              continue;
          }
          if (prop === 'ref' && val !== undefined) {
              ref = val;
              continue;
          }
          // 处理其他属性
          if (Object.prototype.hasOwnProperty.call(config, prop)) { // 只处理 config 对象本身的属性
              props[prop] = val;
          }
      }
      const childrenLength = maybeChildren.length;
      if (childrenLength) {
          if (childrenLength === 1) {
              props.children = maybeChildren[0];
          }
          else if (childrenLength > 1) {
              props.children = Array.from(maybeChildren);
          }
      }
      return ReactElement(type, key, ref, props);
  };
  const Fragment = REACT_FRAGMENT_TYPE;
  // 开发环境下的 jsx 函数
  const jsxDEV = (type, config) => {
      let key = null;
      let ref = null;
      const props = {};
      // 遍历 config 对象
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key' && val !== undefined) {
              key = val;
              continue;
          }
          if (prop === 'ref' && val !== undefined) {
              ref = val;
              continue;
          }
          // 处理其他属性
          if (Object.prototype.hasOwnProperty.call(config, prop)) { // 只处理 config 对象本身的属性
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };

  exports.Fragment = Fragment;
  exports.isValidElement = isValidElement;
  exports.jsx = jsx;
  exports.jsxDEV = jsxDEV;

}));
