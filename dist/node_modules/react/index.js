(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.react = factory());
})(this, (function () { 'use strict';

  const supportSymbol = typeof Symbol === 'function' && Symbol.for;
  // React元素的类型
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for('react.element')
      : 0xeac7;

  // ReactElement 的构造函数：把 JSX 转换成 ReactElement 对象
  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: 'PoorShawn' // 区别于官方React
      };
      return element;
  };
  // 开发环境下的 jsx 函数
  const jsxDEV = (type, config) => {
      let key = null;
      let ref = null;
      const props = {};
      // 遍历 config 对象
      for (const prop in config) {
          const val = config[prop];
          if (prop === 'key' && val !== undefined) {
              key = val;
              continue;
          }
          if (prop === 'ref' && val !== undefined) {
              ref = val;
              continue;
          }
          // 处理其他属性
          if (Object.prototype.hasOwnProperty.call(config, prop)) { // 只处理 config 对象本身的属性
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };

  var index = {
      version: '0.0.0',
      createElement: jsxDEV,
  };

  return index;

}));
